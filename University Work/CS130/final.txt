bool translate(uint64_t *satp, uint64_t vaddr, uint64_t &paddr)
{
  int mode = *satp >> 60;
  uint64_t ppn = *satp << 12; //physical page number acquired from satp
  uint64_t vpn2 = (vaddr >> 30) & 0x1ff; //using a mask and shifting, vpn2, vpn1, vpn0 and page offset is acquired
  uint64_t vpn1 = (vaddr >> 21) & 0x1ff;
  uint64_t vpn0 = (vaddr >> 12) & 0x1ff;
  uint64_t po = vaddr & 0xfff;
  uint64_t ppn2;
  uint64_t ppn1;
  uint64_t ppn0;
  uint64_t *pte;
  uint64_t *pte2;
  uint64_t *pte1;
  uint64_t *pte0;
  if(mode = 0) //checks if mode = 0; sets physical to virtual if mode = 0
  {
      paddr = vaddr;
      return true;
  }
  if(mode = 8)
  {
      pte = ppn + (vpn2 * 8); //pte at level 2 is created 
  }
  pte2 = *pte; //pte dereferenced
  if(pte2 & 1 == 0) //checks valid bit
  {
      return false; //method is finished but a physical address isn't formed; segmentation fault
  }
  if((pte2 >> 1) & 0x7 != 0) //checks XWR bits for leaf; leaf if bits 1,2, or 3 is 1
  {//code for leaf
      ppn2 = pte2 >> 28 & 0x3ffffff; //ppn2 is set using leftmost 28 bits of pte; mask is used to ensure only those bits are used 
      ppn = ((ppn2 << 30) | (vpn1 << 21) | (vpn0 << 12) + po); //physical address is created using ppn2, vpn1, vpn0
      paddr = ppn;
      return true; //method is finished and a valid physical address is formed
  }
  ppn2 = pte2 >> 28 & 0x3ffffff; //ppn2 is set using pte2; mask is used to ensure only those bits are used
  pte2 = pte2 >> 10; //truncates 10 rightmost bits
  pte2 = pte2 << 12; //repositions pte2
  pte2 += vpn1 * 8; //pte at level 1 by adding vpn1 multiplied by 8 into pte
  pte1 = *pte2; //dereferences pte2
  if(pte1 & 1 == 0) //checks valid bit
  {
      return false;//method is finished but a physical address isn't formed; segmentation fault
  }
  if((pte1 >> 1) & 0x7 != 0) //checks for leaf
  {//code for leaf
      ppn1 = pte1 >> 19 & 0x1ff;
      ppn = ((ppn2) << 30) | ((ppn1) << 21) | (vpn0 << 12) + po); //physical address is created using ppn2, ppn1, vpn0
      paddr = ppn;
      return true;
  }
  ppn1 = pte1 >> 19 & 0x1ff; //ppn1 is set using pte; mask is used to ensure only those bits are used
  pte1 = pte1 >> 10; //sets up pte for dereferencing to next level
  pte1 = pte1 << 12; //^^
  pte1 += vpn0 * 8; //^^
  pte0 = *pte1;
  if(pte0 & 1 == 0) //checks valid bit
  {
      return false; //method is finished but a physical address isn't formed; segmentation fault
  }
  if((pte0 >> 1) & 0x7 == 0) //checks if branch
  {
      return false; //method is finished but a physical address isn't formed; segmentation fault; branch cannot occur at level 0
  }
  ppn0 = pte0 >> 10 & 0x1ff; //ppn0 is set
  ppn = (((ppn2 << 30) | (ppn1 << 21) | (ppn0 << 12)) + po); //physical address is created using all ppns
  paddr = ppn;
  return true; //method is finished and a physical address is formed
};